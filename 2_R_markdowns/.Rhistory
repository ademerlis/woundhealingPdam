library(DESeq2)
library(DEGreport) # needs BiocManager
#if you need to install all the packages, you need the package "BiocManager" first.
# if (!require("BiocManager",quietly=TRUE))
#   install.packages("BiocManager")
#Now you can use BiocManager to install pacakges like DESeq2
BiocManager::install("DEGreport")
library(DEGreport) # needs BiocManager
library(tidyverse)
#reading in txt file as a table with the headers as the header in the original file
countsmatrix <-read.table("../0_input_files/WH_Pdam_original.Rmatrix.txt",header=TRUE)
View(countsmatrix)
#removing the Chromosome column from the dataset, and changing the rows to be the gene names
countsmatrix <-countsmatrix %>%
dplyr::select(-c("Chr", "Start", "End", "Strand", "Length")) %>%
column_to_rownames("Geneid")
library(tidyverse)
library(magrittr))
library(magrittr)
detach("package:DEGreport", unload = TRUE)
library(tidyverse)
detach("package:DESeq2", unload = TRUE)
library(tidyverse)
library(tidyr)
library(tidyverse)
install.packages("ggplot2")
install.packages("ggplot2")
library(tidyverse)
library(ggplot2)
remove.packages("ggplot2")
library(tidyverse)
install.packages("ggplot2")
library(tidyverse)
library(DESeq2)
#removing the Chromosome column from the dataset, and changing the rows to be the gene names
countsmatrix <-countsmatrix %>%
dplyr::select(-c("Chr", "Start", "End", "Strand", "Length")) %>%
column_to_rownames("Geneid")
countsmatrix <- countsmatrix %>%
dplyr::select(!X5331C1:X5335Y)
#function found from stack overflow
#tidying column names so they don't include an X anymore (R puts an X in front of columns that start with numbers)
destroyX = function(es) {
f = es
for (col in c(1:ncol(f))){ #for each column in dataframe
if (startsWith(colnames(f)[col], "X") == TRUE)  { #if starts with 'X' ..
colnames(f)[col] <- substr(colnames(f)[col], 2, 100) #get rid of it
}
}
assign(deparse(substitute(es)), f, inherits = TRUE) #assign corrected data to original name
}
destroyX(countsmatrix)
genefeatures <- read.delim(file = "../0_input_files/pdam_genome_IDInfo.gff", header = F)
head(genefeatures)
colnames(genefeatures) <- c("IDGeneInfo")
rownames(genefeatures) <- rownames(countsmatrix)
#removing gene name from the second column
gene_name_split <- str_split_fixed(genefeatures$IDGeneInfo, " ", 2)
print(head(gene_name_split))
colnames(gene_name_split)<- c("Gene_ID","Gene_Function")
head(gene_name_split)
gene_name_split_df<-data.frame(gene_name_split)
head(gene_name_split_df)
#convert the Gene_ID column to the row headers
gene_name_split_df %>%
remove_rownames() %>%
column_to_rownames(var = 'Gene_ID')-> Pdam_Gene_Names_Info
metadata = data.frame(sample=colnames(countsmatrix),
condition = stringr::str_detect(pattern = ".*C.*",string = colnames(countsmatrix)),
hour = stringr::str_replace(pattern = "(.).*",replacement="\\1",string = colnames(countsmatrix)),
id = stringr::str_replace(pattern=".(...).*",replacement="\\1",string=colnames(countsmatrix)))
#changing TRUE and FALSE for condition to Control and Wounded
metadata$condition[str_detect(metadata$condition,"TRUE")] <- "Control"
metadata$condition[str_detect(metadata$condition,"FALSE")] <- "Wounded"
metadata <- metadata %>% column_to_rownames("sample")
metadata$condition <- as.factor(metadata$condition)
metadata
library(tidyverse)
library(DESeq2)
total_genes_regulated <- read_csv("../0_input_files/total_genes_regulated.csv")
ggplot(total_genes_regulated, aes(x=Hour, y=Genes , fill = `Regulation Pattern`)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_classic() +
scale_fill_manual(values = c("#619CFF","#F8766D"))
dds_0 <- readRDS("rds_files/dds_0.rds")
dds_1 <- readRDS("rds_files/dds_1.rds")
dds_2 <- readRDS("rds_files/dds_2.rds")
dds_4 <- readRDS("rds_files/dds_4.rds")
dds_vst0<- vst(dds_0,blind=FALSE)
plotPCA(dds_vst0)
#need to transform the data for plotting
dds_vst0<- vst(dds_0,blind=TRUE)
plotPCA(dds_vst0)
#need to transform the data for plotting
dds_vst0<- vst(dds_0,blind=FALSE)
plotPCA(dds_vst0)
#plotPCA is one function to do it, or you can use the "prcomp" function, which lets you create a scree plot
pca_h0 <- prcomp(t(assay(dds_vst0)))
fviz_eig(pca_h0)
fviz_eig(pca_h0)
library(tidyverse)
library(Rgraphviz) # needs BiocManager
library(factoextra) #for PCA and eigenvectors
library(vegan) #for adonis function for PCA
library(ggpubr)
fviz_eig(pca_h0)
pca_0 = ggplot(pca12_0, aes(PC1,PC2,shape=condition,color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1 (49%)")) +
ylab(paste0("PC2 (24%)")) +
theme(legend.position="right")  +
theme_classic() +
geom_polygon(mapping = aes(fill = condition), alpha = 0.5) +
scale_color_manual(values = c("lightskyblue2", "salmon1")) +
scale_fill_manual(values = c("lightskyblue2", "salmon1"))
#plotting the PCA in ggplot
pca12_0 <- plotPCA(dds_vst0,intgroup=c("condition"),returnData = TRUE)
pca_0 = ggplot(pca12_0, aes(PC1,PC2,shape=condition,color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1 (49%)")) +
ylab(paste0("PC2 (24%)")) +
theme(legend.position="right")  +
theme_classic() +
geom_polygon(mapping = aes(fill = condition), alpha = 0.5) +
scale_color_manual(values = c("lightskyblue2", "salmon1")) +
scale_fill_manual(values = c("lightskyblue2", "salmon1"))
pca12_1 <- plotPCA(dds_vst1,intgroup=c("condition"),returnData = TRUE)
#need to transform the data for plotting
dds_vst0<- vst(dds_0,blind=FALSE)
plotPCA(dds_vst0)
#plotPCA is one function to do it, or you can use the "prcomp" function, which lets you create a scree plot
pca_h0 <- prcomp(t(assay(dds_vst0)))
fviz_eig(pca_h0)
dds_vst1<- vst(dds_1,blind=FALSE)
plotPCA(dds_vst1)
pca_h1 <- prcomp(t(assay(dds_vst1)))
fviz_eig(pca_h1)
dds_vst2<- vst(dds_2,blind=FALSE)
plotPCA(dds_vst2)
pca_h2 <- prcomp(t(assay(dds_vst2)))
fviz_eig(pca_h2)
dds_vst4<- vst(dds_4,blind=FALSE)
plotPCA(dds_vst4)
pca_h4 <- prcomp(t(assay(dds_vst4)))
fviz_eig(pca_h4)
#plotting the PCA in ggplot
pca12_0 <- plotPCA(dds_vst0,intgroup=c("condition"),returnData = TRUE)
pca_0 = ggplot(pca12_0, aes(PC1,PC2,shape=condition,color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1 (49%)")) +
ylab(paste0("PC2 (24%)")) +
theme(legend.position="right")  +
theme_classic() +
geom_polygon(mapping = aes(fill = condition), alpha = 0.5) +
scale_color_manual(values = c("lightskyblue2", "salmon1")) +
scale_fill_manual(values = c("lightskyblue2", "salmon1"))
pca12_1 <- plotPCA(dds_vst1,intgroup=c("condition"),returnData = TRUE)
pca_1 = ggplot(pca12_1, aes(PC1, PC2,shape=condition,color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1 (38%)")) +
ylab(paste0("PC2 (23%)")) +
theme(legend.position="right") +
theme_classic() +
geom_polygon(mapping = aes(fill = condition), alpha = 0.5) +
scale_color_manual(values = c("lightskyblue2", "salmon1")) +
scale_fill_manual(values = c("lightskyblue2", "salmon1"))
pca12_2 <- plotPCA(dds_vst2,intgroup=c("condition"),returnData = TRUE)
pca_2 = ggplot(pca12_2, aes(PC1, PC2,shape=condition,color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1 (35%)")) +
ylab(paste0("PC2 (29%)")) +
theme(legend.position="right") +
theme_classic() +
geom_polygon(mapping = aes(fill = condition), alpha = 0.5)+
scale_color_manual(values = c("lightskyblue2", "salmon1")) +
scale_fill_manual(values = c("lightskyblue2", "salmon1"))
pca12_4 <- plotPCA(dds_vst4,intgroup=c("condition"),returnData = TRUE)
pca_4 = ggplot(pca12_4, aes(PC1, PC2,shape=condition,color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1 (56%)")) +
ylab(paste0("PC2 (21%)")) +
theme(legend.position="right") +
theme_classic() +
geom_polygon(mapping = aes(fill = condition), alpha = 0.5)+
scale_color_manual(values = c("lightskyblue2", "salmon1")) +
scale_fill_manual(values = c("lightskyblue2", "salmon1"))
pca_combined<-ggarrange(pca_0,pca_1,pca_2,pca_4,
common.legend = TRUE,
legend="right",
labels=c("A","B","C","D"),
ncol=2,nrow=2)
pca_combined
ggsave("../4_Figures/PCA_4hours_combined.png",pca_combined,width=8,height=6)
hour0_countsmatrix <- assay(dds_0)
t(hour0_countsmatrix) -> hour0_countsmatrix
#import metadata file
metadata <- readRDS("rds_files/metadata.rds")
metadata_0 <- metadata %>% filter(hour == "0")
PCA.h0.countsdata <- merge(metadata_0, hour0_countsmatrix, by='row.names', all=TRUE)
PCA.h0.countsdata
# scale data
vegan_h0 <- scale(PCA.h0.countsdata[c(5:19451)]) #we just want to scale the gene counts
# PERMANOVA
permanova_h0 <-adonis2(vegan_h0 ~ condition, data = PCA.h0.countsdata, method='eu', na.rm=TRUE, nperm = 999)
permanova_h0 #not significant
metadata_0
#we use the dds object instead of the original countdata_0 matrix because this has filtered out genes with low counts (<10)
hour1_countsmatrix <- assay(dds_1)
t(hour1_countsmatrix) -> hour1_countsmatrix
metadata_1 <- metadata %>% filter(hour == "1")
PCA.h1.countsdata <- merge(metadata_1, hour1_countsmatrix, by='row.names', all=TRUE)
# scale data
vegan_h1 <- scale(PCA.h1.countsdata[c(5:19536)]) #we just want to scale the gene counts
# PERMANOVA
permanova_h1 <-adonis2(vegan_h1 ~ condition, data = PCA.h1.countsdata, method='eu', na.rm=TRUE, nperm = 999)
permanova_h1 #not significant
#we use the dds object instead of the original countdata_0 matrix because this has filtered out genes with low counts (<10)
hour2_countsmatrix <- assay(dds_2)
t(hour2_countsmatrix) -> hour2_countsmatrix
metadata_2 <- metadata %>% filter(hour == "2")
PCA.h2.countsdata <- merge(metadata_2, hour2_countsmatrix, by='row.names', all=TRUE)
# scale data
vegan_h2 <- scale(PCA.h2.countsdata[c(5:19779)]) #we just want to scale the gene counts
# PERMANOVA
permanova_h2<-adonis2(vegan_h2 ~ condition, data = PCA.h2.countsdata, method='eu', na.rm=TRUE, nperm = 999)
permanova_h2 #not significant
#we use the dds object instead of the original countdata_0 matrix because this has filtered out genes with low counts (<10)
hour4_countsmatrix <- assay(dds_4)
t(hour4_countsmatrix) -> hour4_countsmatrix
metadata_4 <- metadata %>% filter(hour == "4")
PCA.h4.countsdata <- merge(metadata_4, hour4_countsmatrix, by='row.names', all=TRUE)
# scale data
vegan_h4 <- scale(PCA.h4.countsdata[c(5:19773)]) #we just want to scale the gene counts
# PERMANOVA
permanova_h4 <-adonis2(vegan_h4 ~ condition, data = PCA.h4.countsdata, method='eu', na.rm=TRUE, nperm = 999)
permanova_h4 #not significant
# PERMANOVA
permanova_h4 <-adonis2(PCA.h4.countsdata ~ condition, data = PCA.h4.countsdata, method='eu', na.rm=TRUE, nperm = 999)
# PERMANOVA
permanova_h4 <-adonis2(PCA.h4.countsdata[c(5:19773)] ~ condition, data = PCA.h4.countsdata, method='eu', na.rm=TRUE, nperm = 999)
permanova_h4 #not significant
library(knitr)
library(DESeq2) #needs BiocManager
library(DEGreport) #needs BiocManager
library(edgeR) #needs BiocManager
library(limma) #needs BiocManager
library(Biobase) #needs BiocManager
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(ggpubr)
library(apeglm)
library(WGCNA)
#library(rnaseqGene) #needs BiocManager
#citation("tximport")
#reading in txt file as a table with the headers as the header in the original file
countsmatrix <-read.table("WH_Pdam.Rmatrix.txt",header=TRUE)
#reading in txt file as a table with the headers as the header in the original file
countsmatrix <-read.table("../0_input_files/WH_Pdam_original.Rmatrix.txt",header=TRUE)
#reading in txt file as a table with the headers as the header in the original file
countsmatrix <-read.table("../0_input_files/WH_Pdam_original.Rmatrix.txt",header=TRUE)
#removing the Chromosome column from the dataset, and changing the rows to be the gene names
countsmatrix <-countsmatrix %>%
dplyr::select(-c("Chr", "Start", "End", "Strand", "Length")) %>%
column_to_rownames("Geneid")
#removing hour 5 from the dataset because it only has 1 wounded coral, so it is not comparable
countsmatrix <- countsmatrix %>%
dplyr::select(!X5331C1:X5335Y)
#function found from stack overflow
#tidying column names so they don't include an X anymore (R puts an X in front of columns that start with numbers)
destroyX = function(es) {
f = es
for (col in c(1:ncol(f))){ #for each column in dataframe
if (startsWith(colnames(f)[col], "X") == TRUE)  { #if starts with 'X' ..
colnames(f)[col] <- substr(colnames(f)[col], 2, 100) #get rid of it
}
}
assign(deparse(substitute(es)), f, inherits = TRUE) #assign corrected data to original name
}
destroyX(countsmatrix)
